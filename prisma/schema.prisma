generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum ProductType {
  INVENTORY
  SERVICES
  NON_INVENTORY
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

model Supplier {
  id               String     @id @unique @default(cuid())
  name             String     @unique
  slug             String     @unique
  email            String     @unique
  phone            String     @unique
  product_supplied String?    @db.Text()
  address          String
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  purchases        Purchase[]

  @@index([slug])
  @@index([email])
  @@index([name])
}

model Category {
  id         String    @id @default(cuid())
  name       String    @unique
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@index([name])
}

model Product {
  id                 String             @id @default(cuid())
  name               String             @unique
  slug               String             @unique
  sku                String             @unique
  selling_price      Float
  category           Category           @relation(fields: [category_id], references: [id])
  type               ProductType        @default(INVENTORY)
  status             ProductStatus      @default(DRAFT)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  category_id        String
  inventory_products InventoryProduct[]
  services_products  ServicesProduct[]
  purchases          Purchase[]

  sale_items SaleItem[]

  @@index([slug])
  @@index([name])
}

model InventoryProduct {
  id            String   @id @default(cuid())
  product       Product  @relation(fields: [product_id], references: [id])
  product_id    String
  reorder_level Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model ServicesProduct {
  id               String   @id @default(cuid())
  product          Product  @relation(fields: [product_id], references: [id])
  product_id       String   @unique
  service_location String?
  service_duration Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model Purchase {
  id            String    @id @default(cuid())
  product       Product   @relation(fields: [product_id], references: [id])
  product_id    String
  quantity      Int
  unit_cost     Float
  total_cost    Float
  supplier      Supplier  @relation(fields: [supplier_id], references: [id])
  supplier_id   String
  expiry_date   DateTime? @db.Date()
  purchase_date DateTime  @db.Date()
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CHECK
}

enum Discount {
  FIXED
  PERCENTAGE
}

enum SaleCategory {
  ROOM
  DRINK
  FOOD
  OTHER
}

model Sale {
  id                     String        @id @default(cuid())
  reference              String        @unique @db.VarChar(10)
  category               SaleCategory
  cashier_id             String        @db.VarChar(100)
  payment_method         PaymentMethod @default(CASH)
  discount               Float?
  sub_total              Float         @default(0)
  tax                    Float         @default(0)
  total                  Float         @default(0)
  amount_received        Float
  customer_change        Float         @default(0)
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  sale_items             SaleItem[]
  customer               Customer?     @relation(fields: [customer_id], references: [id])
  customer_id            String?
  room_number            String?
  transaction_receipt_id String?

  @@index([reference])
}

model SaleItem {
  id            String   @id @default(cuid())
  product       Product  @relation(fields: [product_id], references: [id])
  sale          Sale     @relation(fields: [sale_id], references: [id])
  product_id    String
  sale_id       String
  quantity      Int
  unit_price    Int
  selling_price Float
  total_price   Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([product_id])
}

enum IdOption {
  passport
  drivers_license
  goverment_issued_id
  student_id
}

model Customer {
  id           String   @id @default(cuid())
  first_name   String   @db.VarChar(50)
  last_name    String   @db.VarChar(50)
  birth_date   DateTime @db.Date()
  phone_number String   @unique @db.VarChar(20)
  email        String?  @db.VarChar(50)
  gender       Gender
  idType       IdOption
  id_number    String   @unique @db.VarChar(20)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Sale         Sale[]

  @@index([phone_number])
  @@index([first_name])
  @@index([last_name])
}

enum Gender {
  MEN
  WOMEN
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  first_name  String
  last_name   String
  is_verified Boolean  @default(false)
  email       String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)
  created_by  String? // ID of the user who created this record
  updated_by  String? // ID of the user who last updated this record
  roles       Role[]
}

model Role {
  id             String           @id @default(uuid())
  name           RoleName
  description    String?
  users          User[]
  permissions    Permission[]
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @updatedAt @db.Timestamptz(6)
  created_by     String?
  updated_by     String?
  RolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(uuid())
  name           PermissionName
  description    String?
  roles          Role[]
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @updatedAt @db.Timestamptz(6)
  created_by     String?
  updated_by     String?
  RolePermission RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
}

enum RoleName {
  CASHIER
  MANAGER
  SUPERVISOR
  ADMIN
  DEVELOPER
}

enum PermissionName {
  CREATE_USER
  VIEW_USER
  UPDATE_USER
  DELETE_USER
  MANAGE_USER_PERMISSIONS
  RESET_USER_PASSWORD
  CREATE_PRODUCT
  VIEW_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
  MANAGE_PRODUCT_PRICING
  MANAGE_PRODUCT_DISCOUNTS
  VIEW_INVENTORY
  UPDATE_INVENTORY
  MANAGE_SUPPLIERS
  VIEW_SUPPLY_CHAIN
  CREATE_TRANSACTION
  VIEW_TRANSACTION
  UPDATE_TRANSACTION
  DELETE_TRANSACTION
  PROCESS_REFUND
  APPLY_DISCOUNT
  CREATE_CUSTOMER
  VIEW_CUSTOMER
  UPDATE_CUSTOMER
  DELETE_CUSTOMER
  VIEW_SALES_REPORTS
  VIEW_INVENTORY_REPORTS
  VIEW_FINANCIAL_REPORTS
  EXPORT_REPORTS
  MANAGE_SETTINGS
  MANAGE_PAYMENT_METHODS
  MANAGE_TAX_SETTINGS
  CONFIGURE_NOTIFICATIONS
  CONFIGURE_AUDIT_LOGS
  VIEW_PERMISSIONS
  ASSIGN_PERMISSIONS
  MANAGE_ROLES
  VIEW_AUDIT_LOGS
  MANAGE_TWO_FACTOR_AUTH
  VIEW_SYSTEM_LOGS
  DEBUG_SYSTEM
  DEPLOY_UPDATES
  ACCESS_API
  PERFORM_BACKUP
  CONFIGURE_INTEGRATIONS
}
